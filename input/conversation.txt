Client: Hi, we have an API for federal contracting opportunities, but we don’t have any proper documentation. I need your help to put together the API signatures for it.

Developer: Sure! Could you explain how your API works and what endpoints are available? I can create signatures based on that.

Client: Sure. Our main endpoint is for searching opportunities, and it’s versioned as v2. Users can hit either the Production or Alpha environment.

Production URL: https://api.sam.gov/opportunities/v2/search
Alpha URL: https://api-alpha.sam.gov/opportunities/v2/search

Every request needs an API key passed as a query parameter, and it’s mandatory for all calls.

Developer: Okay, so the API key needs to be sent as a query parameter. Do you have any specific request parameters that should be included?

Client: Yes, there are several. Some are optional, but a couple are required. The required ones are postedFrom and postedTo, which define the date range for opportunities. The format for these should be MM/dd/yyyy, and the date range can’t exceed one year.

Here are the other parameters:

api_key (required): This is the API key.
ptype: The procurement type. It accepts several values like:
u for Justification (J&A)
a for Award Notice
o for Solicitation, etc.
solnum: Solicitation number, to filter by a specific solicitation.
state: The state where the opportunity is located.
limit: Number of records to return per page (default is 1, max is 1000).
offset: For pagination, it sets the page index, starting at 0.
The most important thing is that postedFrom and postedTo are mandatory for every search.

Developer: Got it. So, I’ll define the signature to include these required and optional parameters. What about the response? What details should be included in the response structure?

Client: The response contains the following information:

totalRecords: Total number of matching records.
limit and offset: These return the same values as in the request.
Opportunity Details:
title: The title of the opportunity.
solicitationNumber: The solicitation number.
postedDate: The date the opportunity was posted.
naicsCode and classificationCode: Codes for the opportunity.
active: Whether the opportunity is still active.
setAside: Any set-aside information, like for small businesses.
responseDeadline: The deadline for responding.
If available, the response can also include award details, such as:

award number, award amount, and awardee name.
Developer: This is helpful. Are there any specific error codes or messages that I need to account for?

Client: Yes, we handle errors based on the request’s validity. Here are the main ones:

200 OK: The request was successful.
400 Bad Request: If the request has invalid parameters.
404 Not Found: If no opportunities match the criteria.
500 Internal Server Error: Something went wrong on the server.
We also provide specific error messages for issues like:

Missing API key: "No api_key was supplied."
Invalid Date Format: "Expected date format is MM/dd/yyyy."
Exceeding Date Range: "Date range must not exceed 1 year."
Developer: Understood. I’ll make sure to include those in the documentation as well. One last thing—are there any deprecated parameters I should be aware of?

Client: Yes, in version 2, we deprecated:

deptname (Department Name)
subtier (Agency Name)
These should not be included in the request anymore.

Developer: Great, I have everything I need to create the API signature and documentation. I’ll structure the request, response, and error handling, and include examples as well.

Client: Perfect! Let me know if you need any more details.